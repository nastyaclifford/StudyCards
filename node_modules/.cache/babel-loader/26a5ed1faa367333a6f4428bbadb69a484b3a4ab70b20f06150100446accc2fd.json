{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anast\\\\Desktop\\\\IT GIRLS\\\\ProjectReact_Cards\\\\React_project_WordCards\\\\word-cards\\\\src\\\\pages\\\\Table\\\\Table.jsx\",\n  _s = $RefreshSig$();\nimport TableItem from \"../../components/TableItem/TableItem\";\nimport POST from \"../../services/POST\";\nimport { MyContext } from \"../../context/MyContext\";\nimport { useContext } from \"react\";\nimport style from './table.module.scss'; //импортируем компонент TableItem, массив с информацией о карточках, стили\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Table() {\n  _s();\n  //создаем компонент Table\n  const {\n    words,\n    flag,\n    setFlag\n  } = useContext(MyContext);\n  const [newWord, setNewWord] = useState('');\n  async function addWordToServer() {\n    if (newWord.trim() === '') {\n      // Проверка на пустую строку (не отправляем пустое слово)\n      return;\n    }\n\n    // Создаем объект с данными нового слова\n    const newWordData = {\n      id: \"новый_id\",\n      // Замените на ваш логический ID или генерируйте уникальный ID\n      english: newWord,\n      transcription: \"\",\n      // Добавьте транскрипцию, если необходимо\n      russian: \"\",\n      // Добавьте перевод, если необходимо\n      tags: \"\",\n      tags_json: \"[]\"\n    };\n\n    // Отправляем данные на сервер\n    await POST.postWord(newWordData);\n\n    // Очищаем поле ввода\n    setNewWord('');\n\n    // Обновляем флаг, если это необходимо\n    setFlag(!flag);\n  }\n  return (\n    /*#__PURE__*/\n    //возвращаем разметку таблицы, создаем функцию map для обращения к каждому объекту из массива и использования их в TableItem\n    _jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newWord,\n        onChange: e => setNewWord(e.target.value),\n        placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0441\\u043B\\u043E\\u0432\\u043E\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addWordToServer,\n        children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0441\\u043B\\u043E\\u0432\\u043E\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: style.table,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: style.row,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: style.col,\n            children: \"English\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: style.col,\n            children: \"Transcription\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: style.col,\n            children: \"Russian\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: style.col,\n            children: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 9\n        }, this), words.map((item, index) => /*#__PURE__*/_jsxDEV(TableItem, {\n          ...item,\n          flag: flag,\n          setFlag: setFlag\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 9\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this)\n  );\n}\n_s(Table, \"n564tGK1HTg1XcAtUvE8faJPDJo=\");\n_c = Table;\nexport default Table;\nvar _c;\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"names":["TableItem","POST","MyContext","useContext","style","jsxDEV","_jsxDEV","Table","_s","words","flag","setFlag","newWord","setNewWord","useState","addWordToServer","trim","newWordData","id","english","transcription","russian","tags","tags_json","postWord","children","type","value","onChange","e","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","className","table","row","col","map","item","index","_c","$RefreshReg$"],"sources":["C:/Users/anast/Desktop/IT GIRLS/ProjectReact_Cards/React_project_WordCards/word-cards/src/pages/Table/Table.jsx"],"sourcesContent":["import TableItem from \"../../components/TableItem/TableItem\"\r\nimport POST from \"../../services/POST\";\r\nimport { MyContext } from \"../../context/MyContext\";\r\nimport { useContext } from \"react\";\r\nimport style from './table.module.scss' //импортируем компонент TableItem, массив с информацией о карточках, стили\r\n\r\n\r\n\r\n\r\nfunction Table(){ //создаем компонент Table\r\n    const {words, flag, setFlag} = useContext(MyContext) \r\n    const [newWord, setNewWord] = useState('')\r\n    \r\n    async function addWordToServer() {\r\n        if (newWord.trim() === '') {\r\n            // Проверка на пустую строку (не отправляем пустое слово)\r\n            return;\r\n          }\r\n        \r\n          // Создаем объект с данными нового слова\r\n          const newWordData = {\r\n            id: \"новый_id\", // Замените на ваш логический ID или генерируйте уникальный ID\r\n            english: newWord,\r\n            transcription: \"\", // Добавьте транскрипцию, если необходимо\r\n            russian: \"\", // Добавьте перевод, если необходимо\r\n            tags: \"\",\r\n            tags_json: \"[]\"\r\n          };\r\n        \r\n          // Отправляем данные на сервер\r\n          await POST.postWord(newWordData);\r\n          \r\n          // Очищаем поле ввода\r\n          setNewWord('');\r\n        \r\n          // Обновляем флаг, если это необходимо\r\n          setFlag(!flag);\r\n    }\r\n    return ( //возвращаем разметку таблицы, создаем функцию map для обращения к каждому объекту из массива и использования их в TableItem\r\n        <div>\r\n       \r\n       <input\r\n  type=\"text\"\r\n  value={newWord}\r\n  onChange={(e) => setNewWord(e.target.value)} \r\n  placeholder=\"Введите слово\"\r\n/>\r\n<button onClick={addWordToServer}>Добавить слово</button>\r\n        <div className={style.table}>\r\n        <div className={style.row}>\r\n        <div className={style.col}>English</div>\r\n        <div className={style.col}>Transcription</div>\r\n        <div className={style.col}>Russian</div>\r\n        <div className={style.col}>Edit</div>\r\n        </div>\r\n\r\n        {words.map ((item, index)=> (\r\n        <TableItem \r\n        key = {index}\r\n        {...item} flag={flag} setFlag={setFlag}/>))}</div>\r\n        \r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Table;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}